import cv2
import os
import numpy as np

def convert_yolo_to_polygon(yolo_format, image_width, image_height):
    _, x_center, y_center, width, height = yolo_format
    x_min = int((x_center - width / 2) * image_width)
    y_min = int((y_center - height / 2) * image_height)
    x_max = int((x_center + width / 2) * image_width)
    y_max = int((y_center + height / 2) * image_height)

    polygon = [
        (x_min, y_min),
        (x_max, y_min),
        (x_max, y_max),
        (x_min, y_max)
    ]

    return polygon

def draw_polygon_on_image(image, polygon):
    polygon_array = np.array(polygon, np.int32).reshape((-1, 1, 2))
    cv2.polylines(image, [polygon_array], isClosed=True, color=(0, 255, 0), thickness=2)
    return image

def convert_dataset_to_polygons(input_folder, output_folder):
    images_folder = os.path.join(input_folder, 'images')
    labels_folder = os.path.join(input_folder, 'labels')
    images_output_folder = os.path.join(output_folder, 'images')
    labels_output_folder = os.path.join(output_folder, 'labels')

    if not os.path.exists(images_output_folder):
        os.makedirs(images_output_folder)
    if not os.path.exists(labels_output_folder):
        os.makedirs(labels_output_folder)

    for image_name in os.listdir(images_folder):
        if image_name.endswith(('.jpg', '.jpeg', '.png')):
            image_path = os.path.join(images_folder, image_name)
            image = cv2.imread(image_path)

            image_height, image_width, _ = image.shape

            annotations_path = os.path.join(labels_folder, image_name.replace(image_name[-4:], '.txt'))
            with open(annotations_path, 'r') as f:
                annotations = f.readlines()

            polygons = []
            for annotation in annotations:
                class_id, x_center, y_center, width, height = map(float, annotation.strip().split())
                yolo_format = (class_id, x_center, y_center, width, height)
                polygon = convert_yolo_to_polygon(yolo_format, image_width, image_height)
                polygons.append(polygon)

            output_image_path = os.path.join(images_output_folder, image_name)
            output_image = image.copy()
            for polygon in polygons:
                output_image = draw_polygon_on_image(output_image, polygon)

            output_annotation_path = os.path.join(labels_output_folder, image_name.replace(image_name[-4:], '.txt'))
            with open(output_annotation_path, 'w') as f:
                for polygon in polygons:
                    converted_annotation = ' '.join([f"{coord[0]} {coord[1]}" for coord in polygon])
                    f.write(converted_annotation + '\n')

            cv2.imwrite(output_image_path, output_image)
            print(f'Arquivo {image_name} convertido.')

# Exemplo de uso
input_folder = '/content/zor-7/train'
output_folder = '/content/train3'
convert_dataset_to_polygons(input_folder, output_folder)
